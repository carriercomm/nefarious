# [Except]
#
# These can be used to exempt a user from K:Line's, GLINE's, ZLINE's and
# SHUN's
#
# The syntax for Except blocks is:
#
# Except {
#   mask = "<mask>";
#   flags = "<flags>";
#
# <mask>  is a ident@ip/host/cidr mask that is to match the user to be
#         exempted
# <flags> is oone of the following flags to specify what the exempt is to
#         match
#
# k       E:Line affecks K/k:Lines
# g       E:Line affects GLINE's
# z       E:Line affects ZLINE's
# s       E:Line affects SHUN's
#
# Example:
#
# Except {
#   mask = "*@*.afternet.org";
#   flags = "kgzs";
# };
#


# [Command]
#
# These are lines intended to improve the generic irc users ability to
# use network services. Each line sets up a /<service> alias so that
# users may type that instead of a full /msg command.
#
# for example.. adding:
## Command {
##   cmd = "X2";
##   service = "X2@X2.AfterNET.Services";
##   prefix = "";
## };
# would result in commands like this being possible
## /X2 HELP
#
# Command {
#   cmd = "<name of command/service>";
#   service = "<target>";
#   prefix = "<anything to prepend to message>";
# };
#


# [Forward]
# These blocks will enable the server to forward any messages which
# are prefixed and specific with a b:line. This will allow users to
# use the services without the services being in channel.
#
# Forward {
#   "<prefix>" = "<server>";
# };
#
# Forward {
#   "!" = "services.network.org";
#   "?" = "services.network.org";
# };
#
# Any channel messages prefixed with a ? or a ! would be sent to
# services.network.org in the above examples.


# [Redirect]
#
# These are redirection lines, when a client connects and his/her host
# matches a q:line then a 010 reply is sent with the redir server and
# port.
#
# Redirect {
#   mask = "<mask>";
#   server = "<redirection server>";
#   port = "<redirection port>";
# };
#
#
# Redirect {
#   mask = "*.aol.com";
#   server = "irc.aol.com";
#   port = "6667";
# };
#


# [Spoofhost]
#
# Spoofhost {
#   spoof = "<spoof host>";
#   pass = "<password>";
#   hostmask = "<*.host.cc|a.b.c.*|CIDR>";
#   ident = "<ident>";
# };
#
# <spoof>       A hostname to be spoofed
# <password>    A password for this spoof host. Used if SETHOST_USER is enabled.
# <hostmask>    A hostmask for matching against users that are to be auto
#               spoofed. Used if SETHOST_AUTO is enabled. Can be of form:
#               host.domain.cc, 127.0.0.1 or 127.0.0.0/24, supports wildcards
#               for non-CIDR.
# <ident>       A mask for matching against the user's ident reply.
#


# [Quarantine]
#
# This allows you (the admin) to disallow the usage of /OPMODE and
# /CLEARMODE on certain sensitive channels. Opers trying to do that
# will receive a short notice. Depending on the setting of
# OPER_FORCE_OPMODE, OPER_FORCE_LOPMODE and LOCOP_FORCE_LOPMODE,
# global/local opers may override these lines by prefixing the
# channel name with an exclamation mark ('!')
#
# Quarantine {
#   "#shells" = "Thou shalt not support the h4><0rz";
#   "&kiddies" = "They can take care of themselves";
# };
#


# [DNSBL]
#
# This allows you (the admin) to prevent clients connecting who are listed
# on DNS blacklists. Their connection will be rejected during the connection
# process along with the name and url you give for the DNSBL they have
# been matched on.
#
# DNSBL {
#   server = "<dnsbl.site.org>";
#   name = "<name>";
#   flags = "<flags>";
#   replies = "<replies/mask>";
#   reply = "<rejection message>";
#   rank = "<rank>";
# }
#
#
# Flags:
#
# Bitmask DNSBL:  b - See your DNSBL provider as to if you should use this or not.
# Reply DNSBL:    r - See your DNSBL provider as to if you should use this or not, this
#                     type is normally the default type for most DNSBL's.
# Allow Connect:  a - Allow the client to connect anyway. This could be used with a
#                     DNSBL whitelist. This could also be used to allow people in but
#                     mark their hosts so that channel ops can choose weather they want
#                     them in thier channel or not.
# Deny Connect:   d - If the user is found on this dnsbl then they cant connect, even if
#                     they are allowed on another X:Line.
# Mark Hostname:  m - Mark the hostname of a skipped client.
#
# 
# The name option is used for the Mark hostname flag, this must contain hostname
# valid characters only, ie NO spaces. With REPLY DNSBL's you need to list the
# replies in a comma seperate list. See below for an example. With BITMASK DNSBL's
# just again specify the replies you need to match against. The server will sum
# them up and match them against the DNSBL reply. It is highly recomended that
# you place the rejection message in "quotes". Rejection messages are limited
# in length, currently they cant be all that long but that is being worked on. The
# rejected users nick, username, ip, and host can be placed into the rejection
# message by using these codes:
#
# %n - Nickname
# %u - Username
# %h - Hostname
# %i - IP Address
#
# The rank number must be unique over all DNSBL blocks, the higher the number- the more
# rank it has. The highest ranking DNSBL block which is matched against a user will
# get its name marked in the hostname.
#
# Example:
#
# DNSBL {
#   server = "dnsbl.sorbs.net";
#   name = "sorbs.net";
#   flags = "r";
#   replies = "1,2,3,4";
#   reply = "%n!%u@%h Found On Sorbs DNSBL http://www.dnsbl.us.sorbs.net/cgi-bin/lookup?IP=%i";
#   rank = "1";
# }
#
# This will reject clients who get a return addresses of 1,3 and 4 off
# dnsbl.sorbs.net. Sample rejection message:
#
# "bloggs!someident@google.com Found On Sorbs DNSBL http://www.dnsbl.us.sorbs.net/cgi-bin/lookup?IP=111.222.111.222"
#
# BITMASK Example:
#
# DNSBL {
#   server = "dnsbl.dnsbl.net";
#   name = "dnsbl.net";
#   flags = "b";
#   replies = "1,3,5";
#   reply = "%n!%u@%h Found On DNSBL";
#   rank = "2";
# };
#
# I reccomend you take advantage of ircd.conf includes and list your X:Lines in
# a seperate file as it could be quite a large list.
#
# Notes: MAKE SURE you read the DNSBL website before you go ahead and use it
# as they may have rules for large sites/servers who use them. If you do not
# wish to use DNSBL checking then simply do not set any X:lines. I only
# reccomend that you use one DNSBL, due to the amount of time it will take to
# connect with multiple DNSBL's.


# [WebIRC]
#
# These blocks allow you to run a CGI:IRC client on your website without
# having to set clone exceptions for your websites hostname on your IRCd.
# CGI:IRC will send a WEBIRC command along with the clients hostname, ip and
# W:Line password. The password needs to be encrypted like O:line passwords.
# When the IRCd recieves the command instead of using the hostname of the IRCd
# the hostname sent in WEBIRC will be set. All this is done before the client
# enters the network completly. Please rememeber to enclose the description
# using quotes otherwise things will break.
#
# Available Flags:
# m - Marks each client connected via the W:line using the provided description.
# s - Sets the ident specified in the ident field for each WEBIRC client.
# u - Uses the ident from USER that the WEBIRC client sends.
#
# Note: Do not use both s and u, only choose one of them.
#
#
# WebIRC {
#   mask = "*@afternet.org";
#   pass = "VRKLKuGKn0jLs";
#   flags = "sm";
#   ident = "cgiirc";
#   desc = "AfterNET CGI:IRC";
# };
#


# [Filter]
#
# These blocks allow you to filter PRIVMSG's, NOTICE's, TOPIC's and AWAY's for
# Spam. The filtering is doing using regular expressions so please be careful.
#
# Filter {
#   name = "<regex>";
#   rtype = "<watch flags>";
#   action = "<action flags>";
#   reason = "<reason>";
# };
#
# Available Watch Flags
# n - Notices.
# N - Channel Notices.
# p - Privmsgs.
# C - Channel Privmsgs.
# q - Quits.
# p - Parts.
# d - DCCs.
# a - Away messages.
# t - Topics.
# u - Connects (nick!user@host:gecos).
#
# Available Action Flags
# a - Auth, if added logged in clients will be exempt from the filter.
# C - Channel Alert, if added filter matches will be sent to the F:line set for
#     FILTER_ALERT_CHANNAME.
# S - Server Alert
# k - Kill, will kill anyone who matches the filter line.
# g - Gline, will gline anyone who matches the filter line. The length can be set
#     in seconds via the F:line FILTER_GLINE_LENGTH
# z - Zline, will zline anyone who matches the filter line. The length can be set
#     in seconds via the F:line FILTER_ZLINE_LENGTH
# s - Shun, will shun anyone who matches the filter line. The length can be set
#     in seconds via the F:line FILTER_SHUN_LENGTH
# b - Block, will stop the PRIVMSG/NOTICE/TOPIC/AWAY from going through.
# n - Notify, will notify the person matching the filter line saying they have
#     matched a filter line and the message has been denyed.
#
# Notes:
# Shuns and Glines will be set using *@hostname
#


# [Include]
# You can include certain kinds of configuration snippets from other
# files.  The basic directive, which allows any kind of block or
# recursive include, is:
#
#   Include "filename";
#
# You can limit the file to certain types of configuration blocks by
# using the block name(s), optionally separated by commas.  For
# example:
#
#   Include uworld, jupe, quarantine, kill from "linesync.conf";
#   Include operator from "opers.conf";
#   Include include from "include.conf";
#
# The restrictions are transitive across includes.  This means that
# the last example is not very useful: the only thing include.conf may
# do is include other include files, and none of them may have any
# other kind of block!
#
# Well-formed but disallowed configuration blocks generate a warning
# but do not break the file.  The other syntax rules must still be
# followed, because a syntax error will break the file.

